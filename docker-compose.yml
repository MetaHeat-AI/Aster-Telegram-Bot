version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aster_postgres
    environment:
      POSTGRES_DB: aster_bot
      POSTGRES_USER: aster_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aster_user -d aster_bot"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aster_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_me}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Aster Trading Bot
  aster-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: aster_trading_bot
    environment:
      # Telegram Configuration
      TG_BOT_TOKEN: ${TG_BOT_TOKEN}
      ADMIN_IDS: ${ADMIN_IDS}

      # Database Configuration
      DATABASE_URL: postgresql://aster_user:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/aster_bot
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379

      # Aster API Configuration
      ASTER_BASE_URL: ${ASTER_BASE_URL:-https://api.aster.exchange}
      
      # Encryption Configuration
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}

      # Server Configuration
      PORT: 3000
      NODE_ENV: production

      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: 60000
      RATE_LIMIT_MAX_REQUESTS: 100

      # Trading Configuration
      MAX_LEVERAGE: 20
      DEFAULT_RECV_WINDOW: 5000
      LISTEN_KEY_REFRESH_INTERVAL: 2700000
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      # Mount logs directory (optional)
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: aster_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin_password_change_me}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Optional: Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: aster_redis_commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-redis_password_change_me}
      HTTP_USER: admin
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin_password_change_me}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - admin

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  default:
    name: aster_network